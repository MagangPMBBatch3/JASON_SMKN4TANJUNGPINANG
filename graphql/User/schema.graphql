type User {
    id: ID!
    nama: String!
    email: String!
    password: String!
    email_verified_at: DateTime
    created_at: DateTime
    updated_at: DateTime
    deleted_at: DateTime
}

type UserProfile {
    id: ID!
    user_id: ID!
    nama_lengkap: String
    nrp: String
    alamat: String
    foto: String
}

input RegisterUserInput {
    nama: String!
    email: String!
    password: String!
}

input CreateUserInput {
    nama: String!
    email: String!
    password: String!
}

input UpdateUserInput {
    nama: String
    email: String
    password: String
    email_verified_at: DateTime
}

extend type Query {
    allUsers: [User!]!
    @all(model: "App\\Models\\User")

    allUserArsip: [User!]!
    @field(resolver: "App\\GraphQL\\User\\Queries\\UserQuery@allArsip")


    user(id: ID! @eq(key: "id")): User
    @find(model: "App\\Models\\User")

    userByEmail(email: String! @where(operator: "like", key: "email")): [User!]!
    @all(model: "App\\Models\\User")
}

extend type Mutation {
    createUser(input: CreateUserInput! @spread): User
    @create(model: "App\\Models\\User")

    updateUser(id: ID! @eq(key: "id"), input: UpdateUserInput! @spread): User
    @update(model: "App\\Models\\User")

    deleteUser(id: ID! @eq(key: "id")): User
    @delete(model: "App\\Models\\User")

    restoreUser(id: ID!): User
    @field(resolver: "App\\GraphQL\\User\\Mutations\\UserMutation@restore")

    forceDeleteUser(id: ID!): User
    @field(resolver: "App\\GraphQL\\User\\Mutations\\UserMutation@forceDelete")

    registerUser(input: RegisterUserInput! @spread): User
    @field(resolver: "App\\GraphQL\\User\\Mutations\\UserMutation@register")
}
