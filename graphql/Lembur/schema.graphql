type Lembur {
    id: ID!
    users_profile_id: ID!
    proyek_id: ID!
    tanggal: DateTime
    jam: String!
    created_at: DateTime
    updated_at: DateTime
    deleted_at: DateTime

    
    proyek: Proyek @belongsTo
    users_profile: UserProfile @belongsTo
}



input CreateLemburInput {
    users_profile_id: ID!
    proyek_id: ID!
    tanggal: DateTime
}

input UpdateLemburInput {
    users_profile_id: ID!
    proyek_id: ID!
    tanggal: DateTime
}

extend type Query {
    allLembur(where: LemburWhereInput): [Lembur!]! @all(model: "App\\Models\\Lembur\\Lembur")
    allLemburArsip: [Lembur!]! @field(resolver: "App\\GraphQL\\Lembur\\Queries\\LemburQuery@allArsip")
    Lembur(id: ID! @eq(key: "id")): Lembur @find(model: "App\\Models\\Lembur\\Lembur")
}

input LemburWhereInput {
    users_profile: UserProfileWhereInput
}

input UserProfileWhereInput {
    nama_lengkap: StringWhereInput
}

input StringWhereInput {
    like: String
}

extend type Mutation {
    createLembur(input: CreateLemburInput! @spread): Lembur @create(model: "App\\Models\\Lembur\\Lembur")
    updateLembur(id: ID! @eq(key: "id"), input: UpdateLemburInput! @spread): Lembur @update(model: "App\\Models\\Lembur\\Lembur")
    deleteLembur(id: ID! @eq(key: "id")): Lembur @delete(model: "App\\Models\\Lembur\\Lembur")
    restoreLembur(id: ID!): Lembur @field(resolver: "App\\GraphQL\\Lembur\\Mutations\\LemburMutation@restore")
    forceDeleteLembur(id: ID! @eq(key: "id")): Lembur @field(resolver: "App\\GraphQL\\Lembur\\Mutations\\LemburMutation@forceDelete")
}
